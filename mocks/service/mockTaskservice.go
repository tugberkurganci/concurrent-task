// Code generated by MockGen. DO NOT EDIT.
// Source: konzek-jun/services (interfaces: TaskService)

// Package services is a generated GoMock package.
package services

import (
	models "konzek-jun/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTaskService is a mock of TaskService interface.
type MockTaskService struct {
	ctrl     *gomock.Controller
	recorder *MockTaskServiceMockRecorder
}

// MockTaskServiceMockRecorder is the mock recorder for MockTaskService.
type MockTaskServiceMockRecorder struct {
	mock *MockTaskService
}

// NewMockTaskService creates a new mock instance.
func NewMockTaskService(ctrl *gomock.Controller) *MockTaskService {
	mock := &MockTaskService{ctrl: ctrl}
	mock.recorder = &MockTaskServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskService) EXPECT() *MockTaskServiceMockRecorder {
	return m.recorder
}

// GetAllTaskWithPagination mocks base method.
func (m *MockTaskService) GetAllTaskWithPagination(arg0, arg1 int) ([]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTaskWithPagination", arg0, arg1)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTaskWithPagination indicates an expected call of GetAllTaskWithPagination.
func (mr *MockTaskServiceMockRecorder) GetAllTaskWithPagination(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTaskWithPagination", reflect.TypeOf((*MockTaskService)(nil).GetAllTaskWithPagination), arg0, arg1)
}

// TaskDelete mocks base method.
func (m *MockTaskService) TaskDelete(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaskDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TaskDelete indicates an expected call of TaskDelete.
func (mr *MockTaskServiceMockRecorder) TaskDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskDelete", reflect.TypeOf((*MockTaskService)(nil).TaskDelete), arg0)
}

// TaskGetAll mocks base method.
func (m *MockTaskService) TaskGetAll() ([]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaskGetAll")
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskGetAll indicates an expected call of TaskGetAll.
func (mr *MockTaskServiceMockRecorder) TaskGetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskGetAll", reflect.TypeOf((*MockTaskService)(nil).TaskGetAll))
}

// TaskGetByID mocks base method.
func (m *MockTaskService) TaskGetByID(arg0 int) (models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaskGetByID", arg0)
	ret0, _ := ret[0].(models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskGetByID indicates an expected call of TaskGetByID.
func (mr *MockTaskServiceMockRecorder) TaskGetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskGetByID", reflect.TypeOf((*MockTaskService)(nil).TaskGetByID), arg0)
}

// TaskInsert mocks base method.
func (m *MockTaskService) TaskInsert(arg0 models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaskInsert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TaskInsert indicates an expected call of TaskInsert.
func (mr *MockTaskServiceMockRecorder) TaskInsert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskInsert", reflect.TypeOf((*MockTaskService)(nil).TaskInsert), arg0)
}

// TaskUpdate mocks base method.
func (m *MockTaskService) TaskUpdate(arg0 models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaskUpdate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TaskUpdate indicates an expected call of TaskUpdate.
func (mr *MockTaskServiceMockRecorder) TaskUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskUpdate", reflect.TypeOf((*MockTaskService)(nil).TaskUpdate), arg0)
}
